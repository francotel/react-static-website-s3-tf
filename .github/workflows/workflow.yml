name: Deploy App and IAC to AWS

on:
  push:
    branches:
    - main

env:
  NODE_VERSION: 18
  TF_VERSION: 1.6.2

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      app: ${{ steps.changes.outputs.app }}
      iac: ${{ steps.changes.outputs.iac }}
    steps:
    - uses: actions/checkout@v3

    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          app:
            - 'app/**'
          iac:
            - 'iac/**'  

  # app:
  #   needs: changes
  #   if: ${{ needs.changes.outputs.app == 'true' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - run: echo "hello app"
  app-scan:
    needs: changes
    if: ${{ needs.changes.outputs.app == 'true' }}
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: false
          GITLEAKS_ENABLE_COMMENTS: true
      
      - run: ls -la


      - name: Find and Replace API_KEY_WEATHER
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "API_SECRET_OPEN_WEATHER"
          replace: format('password={0}', secrets.API_KEY_OPEN_WEATHER)
          include: "app/weather-app/src/components/Weather-App/WeatherApp.jsx"

      - run: cat ./app/weather-app/src/components/Weather-App/WeatherApp.jsx

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - run: npm install --quiet
        working-directory: ./app/weather-app

      - run: npm run build --if-present
        working-directory: ./app/weather-app

      - run: npm test
        working-directory: ./app/weather-app

  iac:
    needs: changes
    if: ${{ needs.changes.outputs.iac == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: env.TF_VERSION
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      run: terraform apply tfplan